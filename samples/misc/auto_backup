#!/bin/sh
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU CC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# Copyright (C) 2003, 2005 Vino Fernando Crescini
#
# Vino Fernando Crescini  <jcrescin@cit.uws.edu.au>

# day of the week the weekly backups are to be performed (date +%u)
# default is 7 (sunday)
TIME_WEEK="7"

# day of the month the monthy backups are to be performed (date +%d). watch out
# for months not containing this day (if 31 is given, no backups will be made
# in february, april, etc).
# default is 28
TIME_MONTH="28"

# the month yearly backups are to be perfomed (date +%m). this means yearly
# backups will be made on the ${TIME_MONTH}th day of the ${TIME_YEAR}th month.
# default is 1 (january)
TIME_YEAR="1"

# number of years to keep
# (default is 5)
BACKLOG="5"

# space-delimited list of paths to backup (full-paths)
DIR_SRC=""

# directory to use for backups (full-path)
DIR_BAK=""

CMD_TAR="tar -c -p -s --same-owner --numeric-owner"
CMD_ZIP="gzip -9"

PROGNAME="auto_backup"
PROGVER="2.2"

# del_old <full-path> <backlog>
del_old()
{
  ls -1 ${1} | sort -d -r | sed -n $[${2} + 1]~1p | while read i; do
    rm -f ${1}/${i}
  done
}

while [ ${#} -ge 1 ]; do
  if [ "${1}" = "-h" ]; then
    echo "usage:      ${PROGNAME} [options]"
    echo "options:"
    echo "  -h        print this usage and exit"
    echo "  -V        print version and exit"
    echo ""
    exit 0
  elif [ "${1}" = "-V" ]; then
    echo "${PROGNAME} ${PROGVER}"
    exit 0
  fi
  shift 1
done

cd /
umask 0027

# first and foremost, ensure that DIR_BAK is writable and readable
if [ ! -d "${DIR_BAK}" ] || [ ! -r "${DIR_BAK}" ] || [ ! -w "${DIR_BAK}" ]; then
  echo "${DIR_BAK} not writable or not a directory" 1>&2
  exit -1
fi

# go through each dir that we have to backup
for i in ${DIR_SRC}; do
  # remove leading /
  i="${i#/}"

  # ignore those that we do not have sufficient priviledges
  if [ ! -d "${i}" ] || [ ! -r "${i}" ] || [ ! -x "${i}" ]; then
    echo "${i} not readable or not a directory" 1>&2
    continue
  fi

  # if the name is blank, then it must have been /, which is the curr dir
  if [ -z "${i}" ]; then
    src_dir="."
  else
    src_dir="${i}"
  fi

  bak_dir="${DIR_BAK}/`echo ${i} | tr [/] [_]`"

  # ensure that the directory tree exists for this dir
  mkdir -m 0750 -p "${bak_dir}" || exit -2
  for j in daily weekly monthly yearly; do
    mkdir -m 0750 -p "${bak_dir}/${j}" || exit -2
  done

  # now, for our properly formatted date (obviously not Y10K compliant)
  y="`date +%Y`"
  m="`date +%m`"
  d="`date +%d`"
  w="`date +%u`"
  date="${y}-${m}-${d}"

  # make today's backup
  ${CMD_TAR} "${src_dir}" | ${CMD_ZIP} > "${bak_dir}/daily/${date}.tar.gz"

  # see if it is that time of the week when we need to make a weekly copy
  if [ ${TIME_WEEK} -eq ${w} ]; then
    cp -f "${bak_dir}/daily/${date}.tar.gz" "${bak_dir}/weekly"
  fi

  # is it that time of the month?
  if [ ${TIME_MONTH} -eq ${d} ]; then
    cp -f "${bak_dir}/daily/${date}.tar.gz" "${bak_dir}/monthly"

    # is it that month of the year?
    if [ ${TIME_YEAR} -eq ${m} ]; then
      cp -f "${bak_dir}/daily/${date}.tar.gz" "${bak_dir}/yearly"
    fi
  fi

  # now delete old logs
  del_old "${bak_dir}/daily" 7
  del_old "${bak_dir}/weekly" 4
  del_old "${bak_dir}/monthly" 12
  del_old "${bak_dir}/yearly" ${BACKLOG}

done

exit 0
