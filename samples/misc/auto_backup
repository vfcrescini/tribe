#!/bin/sh
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU CC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# Copyright (C) 2003 Vino Fernando Crescini
#
# Vino Fernando Crescini  <jcrescin@cit.uws.edu.au>


# keep this many backlogs (>=0)
backlog=3

# the space-delimited list of paths to backup (full-paths)
source_dirs="/var/lib/cvs"

# the directory in which backup archives are stored (full-path)
backup_dir="/usr/local/tmp/backup/x"

# command line for tar and gzip to read and write to and from stdout and stdin
tar_cmd="tar -c -p -s --same-owner --numeric-owner"
gzip_cmd="gzip -9"

# first and foremost, ensure that backup_dir is writable and readable
if  [ ! -d ${backup_dir} ] || [ ! -r ${backup_dir} ] || [ ! -w ${backup_dir} ]; then
  exit -1
fi

# now do it
for i in ${source_dirs}; do
  # ignore those that do not have sufficient priviledges
  if [ -d ${i} ] && [ -r ${i} ] && [ -x ${i} ]; then
    cd ${i}

    # compose the prefix
    # do this just in case $PWD doesn't get set
    pwd="`pwd`"
    # remove leading /
    pwd="${pwd#/}"
    # convert / to _
    prefix="`echo ${pwd} | tr [/] [_]`"

    # rotate the backups
    count=${backlog}
    while [ ${count} -ge 0 ]; do
      if [ ${count} -eq ${backlog} ]; then
        # delete oldest one
        rm -f "${backup_dir}/${prefix}-${count}.tar.gz"
      else
        # shift the rest: there should only be one of each count
        if [ -f "${backup_dir}/${prefix}-${count}.tar.gz" ]; then
          mv -f \
            "${backup_dir}/${prefix}-${count}.tar.gz" \
            "${backup_dir}/${prefix}-$((${count}+1)).tar.gz"
        fi
      fi
      # decrement
      count=$((${count}-1))
    done

    # now tar it up and compress
    ${tar_cmd} . | ${gzip_cmd} > "${backup_dir}/${prefix}-0.tar.gz"
  fi
done

exit 0
