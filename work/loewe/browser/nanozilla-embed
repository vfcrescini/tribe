#!/bin/sh

# The contents of this file are subject to the Mozilla Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS
# IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
# implied. See the License for the specific language governing
# rights and limitations under the License.
#
# The Original Code is Goanna.
#
# The Initial Developer of the Original Code is Tuxia
# Labs PTY LTD.  Portions created by Tuxia Labs 
# PTY LTD are Copyright (C) 2001 Tuxia Labs PTY LTD. All
# Rights Reserved.
#
# Contributor(s):
#   Vino Crescini <vino.crescini@tuxia.com>

# commands we need
BROWSER_COMMAND="./nanozilla"
CUT_COMMAND="cut"
CAT_COMMAND="cat"
SLEEP_COMMAND="sleep"
KILL_COMMAND="kill"
ECHO_COMMAND="echo"

# the signal to send to the browser when the 
# memory limit is exceeded
SIGNAL="-3"

# the interval (in seconds) between checks
INTERVAL=1

# minimum/maximum memory limit
MEMORY_MIN=16
MEMORY_MAX=1024

# some env variables the browser needs
export KAFFEHOME="./kaffe"
export LD_LIBRARY_PATH=".:$KAFFEHOME/share/kaffe/lib/i386-linux:$KAFFEHOME/lib"
export MOZILLA_FIVE_HOME="."
export CLASSPATH="$KAFFEHOME/share/kaffe/Klasses.jar"

# check if the limit was given
if [ ${#} -lt 1 ]
then
  echo "usage: ${0} <memory limit (MB)> <browser option 1> ..."
  exit 0
fi

# check if the argument is numeric
count=${#1}
temp=$1
while [ $count -gt 0 ]
do
  temp=${temp#[0-9]}
  count=$[count - 1]
done

# check if the limit is valid
if  [ ${#temp} -ne 0 ] || 
    [ ${1} -lt ${MEMORY_MIN} ] || 
    [ ${1} -gt ${MEMORY_MAX} ]
then
  echo "memory limit must be within ${MEMORY_MIN} and ${MEMORY_MAX}" 
  exit 0
fi

# start the browser without the first argument
${BROWSER_COMMAND} ${@##${1}} &

while true 
do
  if [ -d /proc/${!} ]
  then
    # compute the memory usage in megabytes of the child process
    memusage=`${CAT_COMMAND} /proc/${!}/stat | ${CUT_COMMAND} -d' ' -f24`
    memusage="$[${memusage}*4/1024]"

    # if we exceed the limit, restart
    if [ ${memusage} -ge ${1} ]
    then
      # remember the old pid
      oldpid=${!}
     
      # spawn a new browser
      ${BROWSER_COMMAND} ${@##${1}} &

      # kill the old one by sending the signal
      ${KILL_COMMAND} ${SIGNAL} ${oldpid}
    fi

    # sleep for a while
    ${SLEEP_COMMAND} ${INTERVAL}
  else
    # the pid doesn't exist
    exit 0
  fi
done
