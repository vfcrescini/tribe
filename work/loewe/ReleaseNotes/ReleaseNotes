gtkEmbedBrowser 0.7.0 (IFA Demo Release)
14 September 2001

Description:

  The main embedded application gtkEmbedBrowser is designed to be used
  as a simple, smaller and faster replacement for goanna-bin. 

  Instead of having a GUI, gtkEmbedBrowser is controlled through
  messages sent via a unix domain socket. 

Features:

  - Embedded application based on Minisurf

  - Window Management

  - Personal Security Manager (PSM)

  - Stripped Prompts, Alerts and Confirm dialog boxes

  - Support for Macromedia Flash 5 (see Flash Notes below)

  - Support for RealPlayer 8 (see RealPlayer Notes below)

  - Socket Interface support
  
    - Incoming Messages:

      - Toggle View
      - Available Views
      - Open URL
      - Stop
      - Reload
      - Back
      - Forward
      - Get URL
      - Ping
      - Shutdown
      - Set Geometry
      - Find
      - Enable/disable Javascript
      - Enable/disable Cookies
      - Purge Cache
      - Change font size
      - Print

    - Outgoing Messages

      - Error Messages
      - Get URL Reply
      - Toggle View Reply
      - Pong Reply
      - Load Start
      - Load End
      - Status Message
      - Enable/disable buttons
      - Set location bar URL
      - Set title
      - Window opened
      - SSL active/inactive

Usage:

  In the goanna directory:

    % LD_LIBRARY_PATH=.   \
      MOZILLA_FIVE_HOME=. \
      ./gtkEmbedBrowser -u socket-path [-n max-windows] [-s] [url]

    where:

      socket-path is the full path-name of a unix domain socket

      max-windows is the maximum allowable windows to be opened 
                  (defaults to 2)

      -s          indicates that the browser should revert to the previous
                  state (last URL loaded and window geometry).

      url         is url of the page to be loaded at startup. If this
                  option is not given, the browser will load the last
                  page that was loaded in the previous session. If
                  there is nothing stored in the preferences, the browser
                  will load about:blank by default.

  Alternatively, the supplied wrapper (goanna-embed) script could be used.

    % ./goanna-embed -u socket-path [-n max-windows] [-s] [url]

TSE Component Dependencies:

  - nanozilla/goanna/base
  - nanozilla/goanna/toolkits/gtk

Build Instructions:

  - Compile goanna 2.8.0 (refer to goanna build instructions)

  - Go to the browser directory and make a symbolic link to goanna.

      % cd ../../browser
      % ln -s ../goanna goanna

  - Run make

      % make

  - To build the test socket server program, go to the tests directory
    and make a symbolic link to goanna

      % cd ../test
      % ln -s ../goanna goanna

   - Run make

      % make

Error Messages:

  -  1 Generic Error

  -  2 Specified View Not Available

  -  3 Invalid Message

  -  4 Invalid Parameters
  
  -  5 Invalid Fontsize

  -  6 Invaild View list

  -  7 Invalid find mode

  -  8 Cannot go back

  -  9 Cannot go forward

  - 10 Cannot reload

  - 11 Cannot stop

  - 12 Cannot print


Testing Procedures:

  - Compile goanna, gtkEmbedBrowser and server (test program).

  - Start the test program. It requres a filename path to create a unix domain
    socket.

      % ./server /tmp/tmp-socket

  - Start the embedded browser application. Give the filename path that was
    used in the test server program.

      % ./goanna-embed -u/tmp/tmp-socket -n5

  - The server program will then accept commands and display received 
    messages to and from the browser.

  - Since the program works with stdin and stdout, commands and replies
    can be redirected to and from files.

    For example, if the commands are stored in a file called script.txt then
    the following command will send those commands to the browser:

      $ ./server /tmp/tmp-socket < script.txt

Currently Accepted Messages (bracket indicates optional arguments)

  - toggleView [window id]

  - availableViews [comma separated window id list]

  - openURL [url [window id]]

  - stop

  - start

  - forward

  - back

  - ping

  - shutdown

  - getURL [window id]

  - setGeometry <x> <y> <width> <height>

  - enableJScript <1 | 0>

  - enableJava <1 | 0>

  - enableCookies <1 | 0>

  - purgeCache

  - print <window id> <mode>

    where mode is either:
      - 1 Print all
      - 2 Print current frame

  - find <search string> <mode>

    where mode is a bitwise or'ed value composed of:
      - 1 Case sensitive
      - 2 Wrap around
      - 4 Seach backwards

  - changeFontSize <absolute or relative size>

    if size is preceded by a '+' or a '-' then the value
    is added or subtracted to the current base size,
    respectively.

Outgoing Messages 

  - pong

  - statusMessage <window id> <message id> <message>

  - error <window id> <error id>

  - loadingStarted <window id> <url>

  - loadingProgress <window id> <percent>

  - loadingFinished <window id> <url>

  - getURLRelpy <window id> <url> 

  - setTitle <window id> <title>

  - windowOpened <window id>

  - enableForward <window id> <flag>

  - enableBack <window id> <flag>

  - enableStop <window id> <flag>

  - enableReload <window id> <flag>

  - sslActive <window id> <flag>

    where flag is:
      - 1 enable
      - 2 disable

Window Management Mechanism:

  - At startup, N windows will be opened, where N is given as a command-line
    parameter. Each window is identified by a window ID from 1 to N.

  - Only one window will be visible at a time.

  - The only way to make a window visible is by hiding the current window
    and by un-hiding another window. This can only be accomplished by the
    toggleView command.

  - The toggleView command will hide the current window and display the
    requested window.

  - When a new window is requested by a particular page, the browser will
    open a window whose ID is currently in front of the internal window
    list. By default, the list contains 1, 2, ... N

  - If the window to be opened already exists, then its contents will be
    replaced by the new URL.

  - Any new window opened by the browser will not automatically be visible.
    Likewise, the command openURL will open a window if the requested window
    does not exist, but the newly created window will not be made visible.

  - The internal list may be changed at any time by the availableViews
    command.

  - Windows that are not listed in the internal window-list will be locked
    down -- ie. the browser will never use it when responding to an
    open new window request.

Notes on server.c Test Program:

  - The test program provides an easy to use interface to the socket.
    Commands with their repsective arguments entered in the test program
    will be sent in the right format to the browser's socket interface.
    Similarly, messages sent by the browser will be displayed by the test
    program.
   
  - The commands for the test program are exactly the same as that of
    the socket interface specification. The only difference is that
    the test program accepts a space (\040) and converts it into \004.

    For example, to enter: 

      openURL\004http://www.tuxia.com\0041\000

    in the test program one would type in:

      openURL http://www.tuxia.com 1

Notes on JS dialogs:

  - Since the yesNoDialog, prompt and promptReply messages are not implemented
    yet, pages requiring a confirm dialoge will receive the equivalent of
    clicking the 'OK' button of the said dialog.

  - Pages requiring a prompt dialog box will receive the equivalalent of
    the 'Cancel' button click. This includes variations of the prompt dialog
    such as the password prompt and the login prompt.

  - Finally, SSL dialogs for expired certificates, unknown issuer,
    mismatched domain, etc, will always receive true as if the 'OK'
    button was clicked on its confirm dialog.

Notes on Profiles:

  - Instead of the usual .mozilla directory that Goanna uses, the browser
    stores all profile information in ~/.gtkEmbedBrowser. Unlike Goanna,
    gtkEmbedBrowser currently creates and uses only one profile, default.
    This profile is stored in ~/.gtkEmbedBrowser/dafault.

Notes on Preferences:

  - The file ~/.gtkEmbedBrowser/default/prefs.js is the same as the 
    corresponding file in Goanna. This file is currently used by the
    browser to store the following information:

    - Browser geometry (non-standard mozilla preference)

    - URL of last page visited (currently used as the startup page)

    - Font size

    - Cookie accept state (enabled/disabled)

    - Javascript enable state

    - Print options (see notes below)

    - Helper application bindings (non-standard mozilla preference)

  - The format for prefs.js is as follows:

    user_pref("pref string", value);

Notes on Flash Plugin:

  - To install the Macromedia Flash plugin, simply copy the following files
    to the goanna/plugins directory:

    - ShockwaveFlash.class
    - libflashplayer.so

Notes on RealPlayer:

  - To install the RealPlayer plugin, copy the following files into the
    goanna/plugins directory:

    - raclass.zip
    - rpnp.so

    Note that the RealPlayer 8 distribution contains a plugin for Netscape
    Navigator, and not specifically for Mozilla. Some RealMedia functions
    may not work correctly with this version.

  - The RealPlayer standalone application may be registered with the 
    browser to be invoked when the realmedia mime type is opened.

  - The RealPlayer mime types below must be registered in preferences 
    with the realplay application (see notes on helper applications).

    - audio/x-pn-realaudio
    - application/vnd.rn-realmedia

Notes on Printing:

  - The socket interface for printing does not allow print options to 
    be set. Initially, these options are set with their respective 
    default values. These default values can, however, be overridden
    in the preference file.

  - The print command will only work with Goanna 2.8.0 or higher.

    - Options for margin (in inches)

      - print.print_margin_top
      - print.print_margin_left
      - print.print_margin_bottom
      - print.print_margin_right

    - Options for page-specific information (boolean)

      - print.print_evenpages 
      - print.print_oddpages
      - print.print_doctitle
      - print.print_doclocation
      - print.print_pagenumbers
      - print.print_pagenumjust
      - print.print_pagetotals
      - print.print_date

    - Additional printing options

      - print.print_reversed    (bool)
      - print.print_color       (bool)
      - print.print_paper_size  (int 0=letter, 1=legal, 2=executive, 3=A4, 4=A3)
      - print.print_command     (string, eg. "lpr")
      - print.print_file        (bool)
      - print.print_tofile      (string, eg "/tmp/out.ps")
      - print.print_pagedelay   (int, in milliseconds)

Notes on Helper Applications:

  - The following is format is used to register an external application
    with a mime type:

    - browser.helperapp.handler.x
    - browser.helperapp.mime.x mime  

      where:

        x     is an integer from 1 to 255

        app   is the full pathname of the application to use or 
              an environment variable that points to the full path
              of the application to use (string)

        mime  is the mime type (string)

      example:

        user_pref("browser.helperapp.mime.1", "audio/x-pn-realaudio-plugin");
        user_pref("browser.helperapp.handler.1", "/usr/bin/realplay");
        user_pref("browser.helperapp.mime.2", "application/vnd.rn-realmedia");
        user_pref("browser.helperapp.handler.2", "$REALPLAYER_WRAPPER");

  - The browser will download the media file and store it into /tmp. Once
    the file is completely downloaded, the browser will then invoke the
    external application with the filename of the downloaded file passed
    as an argument.
